// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/hc100/nobolist/backend/ent/predicate"
	"github.com/hc100/nobolist/backend/ent/user"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeUser = "User"
)

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                                  Op
	typ                                 string
	id                                  *int
	active                              *bool
	email                               *string
	email_authentication_key            *string
	email_authentication_key_created_at *time.Time
	email_authentication_status         *bool
	name                                *string
	password                            *string
	role                                *int
	addrole                             *int
	reset_password_key                  *string
	reset_password_key_created_at       *time.Time
	height                              *int
	addheight                           *int
	height_display                      *user.HeightDisplay
	weight                              *int
	addweight                           *int
	weight_display                      *user.WeightDisplay
	wingspan                            *int
	addwingspan                         *int
	wingspan_display                    *user.WingspanDisplay
	birthday                            *time.Time
	birthday_display                    *user.BirthdayDisplay
	gender                              *user.Gender
	gender_display                      *user.GenderDisplay
	created_at                          *time.Time
	updated_at                          *time.Time
	clearedFields                       map[string]struct{}
	done                                bool
	oldValue                            func(context.Context) (*User, error)
	predicates                          []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetActive sets the "active" field.
func (m *UserMutation) SetActive(b bool) {
	m.active = &b
}

// Active returns the value of the "active" field in the mutation.
func (m *UserMutation) Active() (r bool, exists bool) {
	v := m.active
	if v == nil {
		return
	}
	return *v, true
}

// OldActive returns the old "active" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldActive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldActive: %w", err)
	}
	return oldValue.Active, nil
}

// ResetActive resets all changes to the "active" field.
func (m *UserMutation) ResetActive() {
	m.active = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetEmailAuthenticationKey sets the "email_authentication_key" field.
func (m *UserMutation) SetEmailAuthenticationKey(s string) {
	m.email_authentication_key = &s
}

// EmailAuthenticationKey returns the value of the "email_authentication_key" field in the mutation.
func (m *UserMutation) EmailAuthenticationKey() (r string, exists bool) {
	v := m.email_authentication_key
	if v == nil {
		return
	}
	return *v, true
}

// OldEmailAuthenticationKey returns the old "email_authentication_key" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmailAuthenticationKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmailAuthenticationKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmailAuthenticationKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmailAuthenticationKey: %w", err)
	}
	return oldValue.EmailAuthenticationKey, nil
}

// ResetEmailAuthenticationKey resets all changes to the "email_authentication_key" field.
func (m *UserMutation) ResetEmailAuthenticationKey() {
	m.email_authentication_key = nil
}

// SetEmailAuthenticationKeyCreatedAt sets the "email_authentication_key_created_at" field.
func (m *UserMutation) SetEmailAuthenticationKeyCreatedAt(t time.Time) {
	m.email_authentication_key_created_at = &t
}

// EmailAuthenticationKeyCreatedAt returns the value of the "email_authentication_key_created_at" field in the mutation.
func (m *UserMutation) EmailAuthenticationKeyCreatedAt() (r time.Time, exists bool) {
	v := m.email_authentication_key_created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldEmailAuthenticationKeyCreatedAt returns the old "email_authentication_key_created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmailAuthenticationKeyCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmailAuthenticationKeyCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmailAuthenticationKeyCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmailAuthenticationKeyCreatedAt: %w", err)
	}
	return oldValue.EmailAuthenticationKeyCreatedAt, nil
}

// ResetEmailAuthenticationKeyCreatedAt resets all changes to the "email_authentication_key_created_at" field.
func (m *UserMutation) ResetEmailAuthenticationKeyCreatedAt() {
	m.email_authentication_key_created_at = nil
}

// SetEmailAuthenticationStatus sets the "email_authentication_status" field.
func (m *UserMutation) SetEmailAuthenticationStatus(b bool) {
	m.email_authentication_status = &b
}

// EmailAuthenticationStatus returns the value of the "email_authentication_status" field in the mutation.
func (m *UserMutation) EmailAuthenticationStatus() (r bool, exists bool) {
	v := m.email_authentication_status
	if v == nil {
		return
	}
	return *v, true
}

// OldEmailAuthenticationStatus returns the old "email_authentication_status" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmailAuthenticationStatus(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmailAuthenticationStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmailAuthenticationStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmailAuthenticationStatus: %w", err)
	}
	return oldValue.EmailAuthenticationStatus, nil
}

// ResetEmailAuthenticationStatus resets all changes to the "email_authentication_status" field.
func (m *UserMutation) ResetEmailAuthenticationStatus() {
	m.email_authentication_status = nil
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetRole sets the "role" field.
func (m *UserMutation) SetRole(i int) {
	m.role = &i
	m.addrole = nil
}

// Role returns the value of the "role" field in the mutation.
func (m *UserMutation) Role() (r int, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRole(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// AddRole adds i to the "role" field.
func (m *UserMutation) AddRole(i int) {
	if m.addrole != nil {
		*m.addrole += i
	} else {
		m.addrole = &i
	}
}

// AddedRole returns the value that was added to the "role" field in this mutation.
func (m *UserMutation) AddedRole() (r int, exists bool) {
	v := m.addrole
	if v == nil {
		return
	}
	return *v, true
}

// ResetRole resets all changes to the "role" field.
func (m *UserMutation) ResetRole() {
	m.role = nil
	m.addrole = nil
}

// SetResetPasswordKey sets the "reset_password_key" field.
func (m *UserMutation) SetResetPasswordKey(s string) {
	m.reset_password_key = &s
}

// ResetPasswordKey returns the value of the "reset_password_key" field in the mutation.
func (m *UserMutation) ResetPasswordKey() (r string, exists bool) {
	v := m.reset_password_key
	if v == nil {
		return
	}
	return *v, true
}

// OldResetPasswordKey returns the old "reset_password_key" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldResetPasswordKey(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldResetPasswordKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldResetPasswordKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResetPasswordKey: %w", err)
	}
	return oldValue.ResetPasswordKey, nil
}

// ResetResetPasswordKey resets all changes to the "reset_password_key" field.
func (m *UserMutation) ResetResetPasswordKey() {
	m.reset_password_key = nil
}

// SetResetPasswordKeyCreatedAt sets the "reset_password_key_created_at" field.
func (m *UserMutation) SetResetPasswordKeyCreatedAt(t time.Time) {
	m.reset_password_key_created_at = &t
}

// ResetPasswordKeyCreatedAt returns the value of the "reset_password_key_created_at" field in the mutation.
func (m *UserMutation) ResetPasswordKeyCreatedAt() (r time.Time, exists bool) {
	v := m.reset_password_key_created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldResetPasswordKeyCreatedAt returns the old "reset_password_key_created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldResetPasswordKeyCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldResetPasswordKeyCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldResetPasswordKeyCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResetPasswordKeyCreatedAt: %w", err)
	}
	return oldValue.ResetPasswordKeyCreatedAt, nil
}

// ResetResetPasswordKeyCreatedAt resets all changes to the "reset_password_key_created_at" field.
func (m *UserMutation) ResetResetPasswordKeyCreatedAt() {
	m.reset_password_key_created_at = nil
}

// SetHeight sets the "height" field.
func (m *UserMutation) SetHeight(i int) {
	m.height = &i
	m.addheight = nil
}

// Height returns the value of the "height" field in the mutation.
func (m *UserMutation) Height() (r int, exists bool) {
	v := m.height
	if v == nil {
		return
	}
	return *v, true
}

// OldHeight returns the old "height" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldHeight(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeight: %w", err)
	}
	return oldValue.Height, nil
}

// AddHeight adds i to the "height" field.
func (m *UserMutation) AddHeight(i int) {
	if m.addheight != nil {
		*m.addheight += i
	} else {
		m.addheight = &i
	}
}

// AddedHeight returns the value that was added to the "height" field in this mutation.
func (m *UserMutation) AddedHeight() (r int, exists bool) {
	v := m.addheight
	if v == nil {
		return
	}
	return *v, true
}

// ResetHeight resets all changes to the "height" field.
func (m *UserMutation) ResetHeight() {
	m.height = nil
	m.addheight = nil
}

// SetHeightDisplay sets the "height_display" field.
func (m *UserMutation) SetHeightDisplay(ud user.HeightDisplay) {
	m.height_display = &ud
}

// HeightDisplay returns the value of the "height_display" field in the mutation.
func (m *UserMutation) HeightDisplay() (r user.HeightDisplay, exists bool) {
	v := m.height_display
	if v == nil {
		return
	}
	return *v, true
}

// OldHeightDisplay returns the old "height_display" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldHeightDisplay(ctx context.Context) (v user.HeightDisplay, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldHeightDisplay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldHeightDisplay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHeightDisplay: %w", err)
	}
	return oldValue.HeightDisplay, nil
}

// ResetHeightDisplay resets all changes to the "height_display" field.
func (m *UserMutation) ResetHeightDisplay() {
	m.height_display = nil
}

// SetWeight sets the "weight" field.
func (m *UserMutation) SetWeight(i int) {
	m.weight = &i
	m.addweight = nil
}

// Weight returns the value of the "weight" field in the mutation.
func (m *UserMutation) Weight() (r int, exists bool) {
	v := m.weight
	if v == nil {
		return
	}
	return *v, true
}

// OldWeight returns the old "weight" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldWeight(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWeight is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWeight requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeight: %w", err)
	}
	return oldValue.Weight, nil
}

// AddWeight adds i to the "weight" field.
func (m *UserMutation) AddWeight(i int) {
	if m.addweight != nil {
		*m.addweight += i
	} else {
		m.addweight = &i
	}
}

// AddedWeight returns the value that was added to the "weight" field in this mutation.
func (m *UserMutation) AddedWeight() (r int, exists bool) {
	v := m.addweight
	if v == nil {
		return
	}
	return *v, true
}

// ResetWeight resets all changes to the "weight" field.
func (m *UserMutation) ResetWeight() {
	m.weight = nil
	m.addweight = nil
}

// SetWeightDisplay sets the "weight_display" field.
func (m *UserMutation) SetWeightDisplay(ud user.WeightDisplay) {
	m.weight_display = &ud
}

// WeightDisplay returns the value of the "weight_display" field in the mutation.
func (m *UserMutation) WeightDisplay() (r user.WeightDisplay, exists bool) {
	v := m.weight_display
	if v == nil {
		return
	}
	return *v, true
}

// OldWeightDisplay returns the old "weight_display" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldWeightDisplay(ctx context.Context) (v user.WeightDisplay, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWeightDisplay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWeightDisplay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWeightDisplay: %w", err)
	}
	return oldValue.WeightDisplay, nil
}

// ResetWeightDisplay resets all changes to the "weight_display" field.
func (m *UserMutation) ResetWeightDisplay() {
	m.weight_display = nil
}

// SetWingspan sets the "wingspan" field.
func (m *UserMutation) SetWingspan(i int) {
	m.wingspan = &i
	m.addwingspan = nil
}

// Wingspan returns the value of the "wingspan" field in the mutation.
func (m *UserMutation) Wingspan() (r int, exists bool) {
	v := m.wingspan
	if v == nil {
		return
	}
	return *v, true
}

// OldWingspan returns the old "wingspan" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldWingspan(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWingspan is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWingspan requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWingspan: %w", err)
	}
	return oldValue.Wingspan, nil
}

// AddWingspan adds i to the "wingspan" field.
func (m *UserMutation) AddWingspan(i int) {
	if m.addwingspan != nil {
		*m.addwingspan += i
	} else {
		m.addwingspan = &i
	}
}

// AddedWingspan returns the value that was added to the "wingspan" field in this mutation.
func (m *UserMutation) AddedWingspan() (r int, exists bool) {
	v := m.addwingspan
	if v == nil {
		return
	}
	return *v, true
}

// ResetWingspan resets all changes to the "wingspan" field.
func (m *UserMutation) ResetWingspan() {
	m.wingspan = nil
	m.addwingspan = nil
}

// SetWingspanDisplay sets the "wingspan_display" field.
func (m *UserMutation) SetWingspanDisplay(ud user.WingspanDisplay) {
	m.wingspan_display = &ud
}

// WingspanDisplay returns the value of the "wingspan_display" field in the mutation.
func (m *UserMutation) WingspanDisplay() (r user.WingspanDisplay, exists bool) {
	v := m.wingspan_display
	if v == nil {
		return
	}
	return *v, true
}

// OldWingspanDisplay returns the old "wingspan_display" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldWingspanDisplay(ctx context.Context) (v user.WingspanDisplay, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldWingspanDisplay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldWingspanDisplay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWingspanDisplay: %w", err)
	}
	return oldValue.WingspanDisplay, nil
}

// ResetWingspanDisplay resets all changes to the "wingspan_display" field.
func (m *UserMutation) ResetWingspanDisplay() {
	m.wingspan_display = nil
}

// SetBirthday sets the "birthday" field.
func (m *UserMutation) SetBirthday(t time.Time) {
	m.birthday = &t
}

// Birthday returns the value of the "birthday" field in the mutation.
func (m *UserMutation) Birthday() (r time.Time, exists bool) {
	v := m.birthday
	if v == nil {
		return
	}
	return *v, true
}

// OldBirthday returns the old "birthday" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldBirthday(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBirthday is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBirthday requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBirthday: %w", err)
	}
	return oldValue.Birthday, nil
}

// ResetBirthday resets all changes to the "birthday" field.
func (m *UserMutation) ResetBirthday() {
	m.birthday = nil
}

// SetBirthdayDisplay sets the "birthday_display" field.
func (m *UserMutation) SetBirthdayDisplay(ud user.BirthdayDisplay) {
	m.birthday_display = &ud
}

// BirthdayDisplay returns the value of the "birthday_display" field in the mutation.
func (m *UserMutation) BirthdayDisplay() (r user.BirthdayDisplay, exists bool) {
	v := m.birthday_display
	if v == nil {
		return
	}
	return *v, true
}

// OldBirthdayDisplay returns the old "birthday_display" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldBirthdayDisplay(ctx context.Context) (v user.BirthdayDisplay, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBirthdayDisplay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBirthdayDisplay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBirthdayDisplay: %w", err)
	}
	return oldValue.BirthdayDisplay, nil
}

// ResetBirthdayDisplay resets all changes to the "birthday_display" field.
func (m *UserMutation) ResetBirthdayDisplay() {
	m.birthday_display = nil
}

// SetGender sets the "gender" field.
func (m *UserMutation) SetGender(u user.Gender) {
	m.gender = &u
}

// Gender returns the value of the "gender" field in the mutation.
func (m *UserMutation) Gender() (r user.Gender, exists bool) {
	v := m.gender
	if v == nil {
		return
	}
	return *v, true
}

// OldGender returns the old "gender" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldGender(ctx context.Context) (v user.Gender, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGender: %w", err)
	}
	return oldValue.Gender, nil
}

// ResetGender resets all changes to the "gender" field.
func (m *UserMutation) ResetGender() {
	m.gender = nil
}

// SetGenderDisplay sets the "gender_display" field.
func (m *UserMutation) SetGenderDisplay(ud user.GenderDisplay) {
	m.gender_display = &ud
}

// GenderDisplay returns the value of the "gender_display" field in the mutation.
func (m *UserMutation) GenderDisplay() (r user.GenderDisplay, exists bool) {
	v := m.gender_display
	if v == nil {
		return
	}
	return *v, true
}

// OldGenderDisplay returns the old "gender_display" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldGenderDisplay(ctx context.Context) (v user.GenderDisplay, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGenderDisplay is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGenderDisplay requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGenderDisplay: %w", err)
	}
	return oldValue.GenderDisplay, nil
}

// ResetGenderDisplay resets all changes to the "gender_display" field.
func (m *UserMutation) ResetGenderDisplay() {
	m.gender_display = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 22)
	if m.active != nil {
		fields = append(fields, user.FieldActive)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.email_authentication_key != nil {
		fields = append(fields, user.FieldEmailAuthenticationKey)
	}
	if m.email_authentication_key_created_at != nil {
		fields = append(fields, user.FieldEmailAuthenticationKeyCreatedAt)
	}
	if m.email_authentication_status != nil {
		fields = append(fields, user.FieldEmailAuthenticationStatus)
	}
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.role != nil {
		fields = append(fields, user.FieldRole)
	}
	if m.reset_password_key != nil {
		fields = append(fields, user.FieldResetPasswordKey)
	}
	if m.reset_password_key_created_at != nil {
		fields = append(fields, user.FieldResetPasswordKeyCreatedAt)
	}
	if m.height != nil {
		fields = append(fields, user.FieldHeight)
	}
	if m.height_display != nil {
		fields = append(fields, user.FieldHeightDisplay)
	}
	if m.weight != nil {
		fields = append(fields, user.FieldWeight)
	}
	if m.weight_display != nil {
		fields = append(fields, user.FieldWeightDisplay)
	}
	if m.wingspan != nil {
		fields = append(fields, user.FieldWingspan)
	}
	if m.wingspan_display != nil {
		fields = append(fields, user.FieldWingspanDisplay)
	}
	if m.birthday != nil {
		fields = append(fields, user.FieldBirthday)
	}
	if m.birthday_display != nil {
		fields = append(fields, user.FieldBirthdayDisplay)
	}
	if m.gender != nil {
		fields = append(fields, user.FieldGender)
	}
	if m.gender_display != nil {
		fields = append(fields, user.FieldGenderDisplay)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldActive:
		return m.Active()
	case user.FieldEmail:
		return m.Email()
	case user.FieldEmailAuthenticationKey:
		return m.EmailAuthenticationKey()
	case user.FieldEmailAuthenticationKeyCreatedAt:
		return m.EmailAuthenticationKeyCreatedAt()
	case user.FieldEmailAuthenticationStatus:
		return m.EmailAuthenticationStatus()
	case user.FieldName:
		return m.Name()
	case user.FieldPassword:
		return m.Password()
	case user.FieldRole:
		return m.Role()
	case user.FieldResetPasswordKey:
		return m.ResetPasswordKey()
	case user.FieldResetPasswordKeyCreatedAt:
		return m.ResetPasswordKeyCreatedAt()
	case user.FieldHeight:
		return m.Height()
	case user.FieldHeightDisplay:
		return m.HeightDisplay()
	case user.FieldWeight:
		return m.Weight()
	case user.FieldWeightDisplay:
		return m.WeightDisplay()
	case user.FieldWingspan:
		return m.Wingspan()
	case user.FieldWingspanDisplay:
		return m.WingspanDisplay()
	case user.FieldBirthday:
		return m.Birthday()
	case user.FieldBirthdayDisplay:
		return m.BirthdayDisplay()
	case user.FieldGender:
		return m.Gender()
	case user.FieldGenderDisplay:
		return m.GenderDisplay()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldActive:
		return m.OldActive(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldEmailAuthenticationKey:
		return m.OldEmailAuthenticationKey(ctx)
	case user.FieldEmailAuthenticationKeyCreatedAt:
		return m.OldEmailAuthenticationKeyCreatedAt(ctx)
	case user.FieldEmailAuthenticationStatus:
		return m.OldEmailAuthenticationStatus(ctx)
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldRole:
		return m.OldRole(ctx)
	case user.FieldResetPasswordKey:
		return m.OldResetPasswordKey(ctx)
	case user.FieldResetPasswordKeyCreatedAt:
		return m.OldResetPasswordKeyCreatedAt(ctx)
	case user.FieldHeight:
		return m.OldHeight(ctx)
	case user.FieldHeightDisplay:
		return m.OldHeightDisplay(ctx)
	case user.FieldWeight:
		return m.OldWeight(ctx)
	case user.FieldWeightDisplay:
		return m.OldWeightDisplay(ctx)
	case user.FieldWingspan:
		return m.OldWingspan(ctx)
	case user.FieldWingspanDisplay:
		return m.OldWingspanDisplay(ctx)
	case user.FieldBirthday:
		return m.OldBirthday(ctx)
	case user.FieldBirthdayDisplay:
		return m.OldBirthdayDisplay(ctx)
	case user.FieldGender:
		return m.OldGender(ctx)
	case user.FieldGenderDisplay:
		return m.OldGenderDisplay(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldActive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetActive(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldEmailAuthenticationKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmailAuthenticationKey(v)
		return nil
	case user.FieldEmailAuthenticationKeyCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmailAuthenticationKeyCreatedAt(v)
		return nil
	case user.FieldEmailAuthenticationStatus:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmailAuthenticationStatus(v)
		return nil
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldRole:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case user.FieldResetPasswordKey:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResetPasswordKey(v)
		return nil
	case user.FieldResetPasswordKeyCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResetPasswordKeyCreatedAt(v)
		return nil
	case user.FieldHeight:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeight(v)
		return nil
	case user.FieldHeightDisplay:
		v, ok := value.(user.HeightDisplay)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHeightDisplay(v)
		return nil
	case user.FieldWeight:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeight(v)
		return nil
	case user.FieldWeightDisplay:
		v, ok := value.(user.WeightDisplay)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWeightDisplay(v)
		return nil
	case user.FieldWingspan:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWingspan(v)
		return nil
	case user.FieldWingspanDisplay:
		v, ok := value.(user.WingspanDisplay)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWingspanDisplay(v)
		return nil
	case user.FieldBirthday:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBirthday(v)
		return nil
	case user.FieldBirthdayDisplay:
		v, ok := value.(user.BirthdayDisplay)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBirthdayDisplay(v)
		return nil
	case user.FieldGender:
		v, ok := value.(user.Gender)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGender(v)
		return nil
	case user.FieldGenderDisplay:
		v, ok := value.(user.GenderDisplay)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGenderDisplay(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.addrole != nil {
		fields = append(fields, user.FieldRole)
	}
	if m.addheight != nil {
		fields = append(fields, user.FieldHeight)
	}
	if m.addweight != nil {
		fields = append(fields, user.FieldWeight)
	}
	if m.addwingspan != nil {
		fields = append(fields, user.FieldWingspan)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldRole:
		return m.AddedRole()
	case user.FieldHeight:
		return m.AddedHeight()
	case user.FieldWeight:
		return m.AddedWeight()
	case user.FieldWingspan:
		return m.AddedWingspan()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldRole:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRole(v)
		return nil
	case user.FieldHeight:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddHeight(v)
		return nil
	case user.FieldWeight:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWeight(v)
		return nil
	case user.FieldWingspan:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddWingspan(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldActive:
		m.ResetActive()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldEmailAuthenticationKey:
		m.ResetEmailAuthenticationKey()
		return nil
	case user.FieldEmailAuthenticationKeyCreatedAt:
		m.ResetEmailAuthenticationKeyCreatedAt()
		return nil
	case user.FieldEmailAuthenticationStatus:
		m.ResetEmailAuthenticationStatus()
		return nil
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldRole:
		m.ResetRole()
		return nil
	case user.FieldResetPasswordKey:
		m.ResetResetPasswordKey()
		return nil
	case user.FieldResetPasswordKeyCreatedAt:
		m.ResetResetPasswordKeyCreatedAt()
		return nil
	case user.FieldHeight:
		m.ResetHeight()
		return nil
	case user.FieldHeightDisplay:
		m.ResetHeightDisplay()
		return nil
	case user.FieldWeight:
		m.ResetWeight()
		return nil
	case user.FieldWeightDisplay:
		m.ResetWeightDisplay()
		return nil
	case user.FieldWingspan:
		m.ResetWingspan()
		return nil
	case user.FieldWingspanDisplay:
		m.ResetWingspanDisplay()
		return nil
	case user.FieldBirthday:
		m.ResetBirthday()
		return nil
	case user.FieldBirthdayDisplay:
		m.ResetBirthdayDisplay()
		return nil
	case user.FieldGender:
		m.ResetGender()
		return nil
	case user.FieldGenderDisplay:
		m.ResetGenderDisplay()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}
