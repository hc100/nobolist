// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/hc100/nobolist/backend/ent/user"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Active holds the value of the "active" field.
	Active bool `json:"active,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// EmailAuthenticationKey holds the value of the "email_authentication_key" field.
	EmailAuthenticationKey string `json:"email_authentication_key,omitempty"`
	// EmailAuthenticationKeyCreatedAt holds the value of the "email_authentication_key_created_at" field.
	EmailAuthenticationKeyCreatedAt time.Time `json:"email_authentication_key_created_at,omitempty"`
	// EmailAuthenticationStatus holds the value of the "email_authentication_status" field.
	EmailAuthenticationStatus bool `json:"email_authentication_status,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// Role holds the value of the "role" field.
	Role int `json:"role,omitempty"`
	// ResetPasswordKey holds the value of the "reset_password_key" field.
	ResetPasswordKey string `json:"reset_password_key,omitempty"`
	// ResetPasswordKeyCreatedAt holds the value of the "reset_password_key_created_at" field.
	ResetPasswordKeyCreatedAt time.Time `json:"reset_password_key_created_at,omitempty"`
	// Height holds the value of the "height" field.
	Height int `json:"height,omitempty"`
	// HeightDisplay holds the value of the "height_display" field.
	HeightDisplay user.HeightDisplay `json:"height_display,omitempty"`
	// Weight holds the value of the "weight" field.
	Weight int `json:"weight,omitempty"`
	// WeightDisplay holds the value of the "weight_display" field.
	WeightDisplay user.WeightDisplay `json:"weight_display,omitempty"`
	// Wingspan holds the value of the "wingspan" field.
	Wingspan int `json:"wingspan,omitempty"`
	// WingspanDisplay holds the value of the "wingspan_display" field.
	WingspanDisplay user.WingspanDisplay `json:"wingspan_display,omitempty"`
	// Birthday holds the value of the "birthday" field.
	Birthday time.Time `json:"birthday,omitempty"`
	// BirthdayDisplay holds the value of the "birthday_display" field.
	BirthdayDisplay user.BirthdayDisplay `json:"birthday_display,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender user.Gender `json:"gender,omitempty"`
	// GenderDisplay holds the value of the "gender_display" field.
	GenderDisplay user.GenderDisplay `json:"gender_display,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldActive, user.FieldEmailAuthenticationStatus:
			values[i] = new(sql.NullBool)
		case user.FieldID, user.FieldRole, user.FieldHeight, user.FieldWeight, user.FieldWingspan:
			values[i] = new(sql.NullInt64)
		case user.FieldEmail, user.FieldEmailAuthenticationKey, user.FieldName, user.FieldPassword, user.FieldResetPasswordKey, user.FieldHeightDisplay, user.FieldWeightDisplay, user.FieldWingspanDisplay, user.FieldBirthdayDisplay, user.FieldGender, user.FieldGenderDisplay:
			values[i] = new(sql.NullString)
		case user.FieldEmailAuthenticationKeyCreatedAt, user.FieldResetPasswordKeyCreatedAt, user.FieldBirthday, user.FieldCreatedAt, user.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type User", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			u.ID = int(value.Int64)
		case user.FieldActive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field active", values[i])
			} else if value.Valid {
				u.Active = value.Bool
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldEmailAuthenticationKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email_authentication_key", values[i])
			} else if value.Valid {
				u.EmailAuthenticationKey = value.String
			}
		case user.FieldEmailAuthenticationKeyCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field email_authentication_key_created_at", values[i])
			} else if value.Valid {
				u.EmailAuthenticationKeyCreatedAt = value.Time
			}
		case user.FieldEmailAuthenticationStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field email_authentication_status", values[i])
			} else if value.Valid {
				u.EmailAuthenticationStatus = value.Bool
			}
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldRole:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				u.Role = int(value.Int64)
			}
		case user.FieldResetPasswordKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reset_password_key", values[i])
			} else if value.Valid {
				u.ResetPasswordKey = value.String
			}
		case user.FieldResetPasswordKeyCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field reset_password_key_created_at", values[i])
			} else if value.Valid {
				u.ResetPasswordKeyCreatedAt = value.Time
			}
		case user.FieldHeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field height", values[i])
			} else if value.Valid {
				u.Height = int(value.Int64)
			}
		case user.FieldHeightDisplay:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field height_display", values[i])
			} else if value.Valid {
				u.HeightDisplay = user.HeightDisplay(value.String)
			}
		case user.FieldWeight:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field weight", values[i])
			} else if value.Valid {
				u.Weight = int(value.Int64)
			}
		case user.FieldWeightDisplay:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field weight_display", values[i])
			} else if value.Valid {
				u.WeightDisplay = user.WeightDisplay(value.String)
			}
		case user.FieldWingspan:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field wingspan", values[i])
			} else if value.Valid {
				u.Wingspan = int(value.Int64)
			}
		case user.FieldWingspanDisplay:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wingspan_display", values[i])
			} else if value.Valid {
				u.WingspanDisplay = user.WingspanDisplay(value.String)
			}
		case user.FieldBirthday:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field birthday", values[i])
			} else if value.Valid {
				u.Birthday = value.Time
			}
		case user.FieldBirthdayDisplay:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field birthday_display", values[i])
			} else if value.Valid {
				u.BirthdayDisplay = user.BirthdayDisplay(value.String)
			}
		case user.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				u.Gender = user.Gender(value.String)
			}
		case user.FieldGenderDisplay:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gender_display", values[i])
			} else if value.Valid {
				u.GenderDisplay = user.GenderDisplay(value.String)
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return (&UserClient{config: u.config}).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v", u.ID))
	builder.WriteString(", active=")
	builder.WriteString(fmt.Sprintf("%v", u.Active))
	builder.WriteString(", email=")
	builder.WriteString(u.Email)
	builder.WriteString(", email_authentication_key=")
	builder.WriteString(u.EmailAuthenticationKey)
	builder.WriteString(", email_authentication_key_created_at=")
	builder.WriteString(u.EmailAuthenticationKeyCreatedAt.Format(time.ANSIC))
	builder.WriteString(", email_authentication_status=")
	builder.WriteString(fmt.Sprintf("%v", u.EmailAuthenticationStatus))
	builder.WriteString(", name=")
	builder.WriteString(u.Name)
	builder.WriteString(", password=")
	builder.WriteString(u.Password)
	builder.WriteString(", role=")
	builder.WriteString(fmt.Sprintf("%v", u.Role))
	builder.WriteString(", reset_password_key=")
	builder.WriteString(u.ResetPasswordKey)
	builder.WriteString(", reset_password_key_created_at=")
	builder.WriteString(u.ResetPasswordKeyCreatedAt.Format(time.ANSIC))
	builder.WriteString(", height=")
	builder.WriteString(fmt.Sprintf("%v", u.Height))
	builder.WriteString(", height_display=")
	builder.WriteString(fmt.Sprintf("%v", u.HeightDisplay))
	builder.WriteString(", weight=")
	builder.WriteString(fmt.Sprintf("%v", u.Weight))
	builder.WriteString(", weight_display=")
	builder.WriteString(fmt.Sprintf("%v", u.WeightDisplay))
	builder.WriteString(", wingspan=")
	builder.WriteString(fmt.Sprintf("%v", u.Wingspan))
	builder.WriteString(", wingspan_display=")
	builder.WriteString(fmt.Sprintf("%v", u.WingspanDisplay))
	builder.WriteString(", birthday=")
	builder.WriteString(u.Birthday.Format(time.ANSIC))
	builder.WriteString(", birthday_display=")
	builder.WriteString(fmt.Sprintf("%v", u.BirthdayDisplay))
	builder.WriteString(", gender=")
	builder.WriteString(fmt.Sprintf("%v", u.Gender))
	builder.WriteString(", gender_display=")
	builder.WriteString(fmt.Sprintf("%v", u.GenderDisplay))
	builder.WriteString(", created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User

func (u Users) config(cfg config) {
	for _i := range u {
		u[_i].config = cfg
	}
}
