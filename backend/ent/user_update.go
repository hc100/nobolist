// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/hc100/nobolist/backend/ent/predicate"
	"github.com/hc100/nobolist/backend/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetActive sets the "active" field.
func (uu *UserUpdate) SetActive(b bool) *UserUpdate {
	uu.mutation.SetActive(b)
	return uu
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (uu *UserUpdate) SetNillableActive(b *bool) *UserUpdate {
	if b != nil {
		uu.SetActive(*b)
	}
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetEmailAuthenticationKey sets the "email_authentication_key" field.
func (uu *UserUpdate) SetEmailAuthenticationKey(s string) *UserUpdate {
	uu.mutation.SetEmailAuthenticationKey(s)
	return uu
}

// SetEmailAuthenticationKeyCreatedAt sets the "email_authentication_key_created_at" field.
func (uu *UserUpdate) SetEmailAuthenticationKeyCreatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetEmailAuthenticationKeyCreatedAt(t)
	return uu
}

// SetEmailAuthenticationStatus sets the "email_authentication_status" field.
func (uu *UserUpdate) SetEmailAuthenticationStatus(b bool) *UserUpdate {
	uu.mutation.SetEmailAuthenticationStatus(b)
	return uu
}

// SetNillableEmailAuthenticationStatus sets the "email_authentication_status" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmailAuthenticationStatus(b *bool) *UserUpdate {
	if b != nil {
		uu.SetEmailAuthenticationStatus(*b)
	}
	return uu
}

// SetName sets the "name" field.
func (uu *UserUpdate) SetName(s string) *UserUpdate {
	uu.mutation.SetName(s)
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePassword(s *string) *UserUpdate {
	if s != nil {
		uu.SetPassword(*s)
	}
	return uu
}

// SetRole sets the "role" field.
func (uu *UserUpdate) SetRole(i int) *UserUpdate {
	uu.mutation.ResetRole()
	uu.mutation.SetRole(i)
	return uu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRole(i *int) *UserUpdate {
	if i != nil {
		uu.SetRole(*i)
	}
	return uu
}

// AddRole adds i to the "role" field.
func (uu *UserUpdate) AddRole(i int) *UserUpdate {
	uu.mutation.AddRole(i)
	return uu
}

// SetResetPasswordKey sets the "reset_password_key" field.
func (uu *UserUpdate) SetResetPasswordKey(s string) *UserUpdate {
	uu.mutation.SetResetPasswordKey(s)
	return uu
}

// SetResetPasswordKeyCreatedAt sets the "reset_password_key_created_at" field.
func (uu *UserUpdate) SetResetPasswordKeyCreatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetResetPasswordKeyCreatedAt(t)
	return uu
}

// SetHeight sets the "height" field.
func (uu *UserUpdate) SetHeight(i int) *UserUpdate {
	uu.mutation.ResetHeight()
	uu.mutation.SetHeight(i)
	return uu
}

// AddHeight adds i to the "height" field.
func (uu *UserUpdate) AddHeight(i int) *UserUpdate {
	uu.mutation.AddHeight(i)
	return uu
}

// SetHeightDisplay sets the "height_display" field.
func (uu *UserUpdate) SetHeightDisplay(ud user.HeightDisplay) *UserUpdate {
	uu.mutation.SetHeightDisplay(ud)
	return uu
}

// SetWeight sets the "weight" field.
func (uu *UserUpdate) SetWeight(i int) *UserUpdate {
	uu.mutation.ResetWeight()
	uu.mutation.SetWeight(i)
	return uu
}

// AddWeight adds i to the "weight" field.
func (uu *UserUpdate) AddWeight(i int) *UserUpdate {
	uu.mutation.AddWeight(i)
	return uu
}

// SetWeightDisplay sets the "weight_display" field.
func (uu *UserUpdate) SetWeightDisplay(ud user.WeightDisplay) *UserUpdate {
	uu.mutation.SetWeightDisplay(ud)
	return uu
}

// SetWingspan sets the "wingspan" field.
func (uu *UserUpdate) SetWingspan(i int) *UserUpdate {
	uu.mutation.ResetWingspan()
	uu.mutation.SetWingspan(i)
	return uu
}

// AddWingspan adds i to the "wingspan" field.
func (uu *UserUpdate) AddWingspan(i int) *UserUpdate {
	uu.mutation.AddWingspan(i)
	return uu
}

// SetWingspanDisplay sets the "wingspan_display" field.
func (uu *UserUpdate) SetWingspanDisplay(ud user.WingspanDisplay) *UserUpdate {
	uu.mutation.SetWingspanDisplay(ud)
	return uu
}

// SetBirthday sets the "birthday" field.
func (uu *UserUpdate) SetBirthday(t time.Time) *UserUpdate {
	uu.mutation.SetBirthday(t)
	return uu
}

// SetBirthdayDisplay sets the "birthday_display" field.
func (uu *UserUpdate) SetBirthdayDisplay(ud user.BirthdayDisplay) *UserUpdate {
	uu.mutation.SetBirthdayDisplay(ud)
	return uu
}

// SetGender sets the "gender" field.
func (uu *UserUpdate) SetGender(u user.Gender) *UserUpdate {
	uu.mutation.SetGender(u)
	return uu
}

// SetGenderDisplay sets the "gender_display" field.
func (uu *UserUpdate) SetGenderDisplay(ud user.GenderDisplay) *UserUpdate {
	uu.mutation.SetGenderDisplay(ud)
	return uu
}

// SetCreatedAt sets the "created_at" field.
func (uu *UserUpdate) SetCreatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetCreatedAt(t)
	return uu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCreatedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetCreatedAt(*t)
	}
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	uu.defaults()
	if len(uu.hooks) == 0 {
		if err = uu.check(); err != nil {
			return 0, err
		}
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uu.check(); err != nil {
				return 0, err
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			if uu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.HeightDisplay(); ok {
		if err := user.HeightDisplayValidator(v); err != nil {
			return &ValidationError{Name: "height_display", err: fmt.Errorf("ent: validator failed for field \"height_display\": %w", err)}
		}
	}
	if v, ok := uu.mutation.WeightDisplay(); ok {
		if err := user.WeightDisplayValidator(v); err != nil {
			return &ValidationError{Name: "weight_display", err: fmt.Errorf("ent: validator failed for field \"weight_display\": %w", err)}
		}
	}
	if v, ok := uu.mutation.WingspanDisplay(); ok {
		if err := user.WingspanDisplayValidator(v); err != nil {
			return &ValidationError{Name: "wingspan_display", err: fmt.Errorf("ent: validator failed for field \"wingspan_display\": %w", err)}
		}
	}
	if v, ok := uu.mutation.BirthdayDisplay(); ok {
		if err := user.BirthdayDisplayValidator(v); err != nil {
			return &ValidationError{Name: "birthday_display", err: fmt.Errorf("ent: validator failed for field \"birthday_display\": %w", err)}
		}
	}
	if v, ok := uu.mutation.Gender(); ok {
		if err := user.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf("ent: validator failed for field \"gender\": %w", err)}
		}
	}
	if v, ok := uu.mutation.GenderDisplay(); ok {
		if err := user.GenderDisplayValidator(v); err != nil {
			return &ValidationError{Name: "gender_display", err: fmt.Errorf("ent: validator failed for field \"gender_display\": %w", err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Active(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldActive,
		})
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEmail,
		})
	}
	if value, ok := uu.mutation.EmailAuthenticationKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEmailAuthenticationKey,
		})
	}
	if value, ok := uu.mutation.EmailAuthenticationKeyCreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldEmailAuthenticationKeyCreatedAt,
		})
	}
	if value, ok := uu.mutation.EmailAuthenticationStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldEmailAuthenticationStatus,
		})
	}
	if value, ok := uu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldName,
		})
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassword,
		})
	}
	if value, ok := uu.mutation.Role(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldRole,
		})
	}
	if value, ok := uu.mutation.AddedRole(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldRole,
		})
	}
	if value, ok := uu.mutation.ResetPasswordKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldResetPasswordKey,
		})
	}
	if value, ok := uu.mutation.ResetPasswordKeyCreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldResetPasswordKeyCreatedAt,
		})
	}
	if value, ok := uu.mutation.Height(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldHeight,
		})
	}
	if value, ok := uu.mutation.AddedHeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldHeight,
		})
	}
	if value, ok := uu.mutation.HeightDisplay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: user.FieldHeightDisplay,
		})
	}
	if value, ok := uu.mutation.Weight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldWeight,
		})
	}
	if value, ok := uu.mutation.AddedWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldWeight,
		})
	}
	if value, ok := uu.mutation.WeightDisplay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: user.FieldWeightDisplay,
		})
	}
	if value, ok := uu.mutation.Wingspan(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldWingspan,
		})
	}
	if value, ok := uu.mutation.AddedWingspan(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldWingspan,
		})
	}
	if value, ok := uu.mutation.WingspanDisplay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: user.FieldWingspanDisplay,
		})
	}
	if value, ok := uu.mutation.Birthday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldBirthday,
		})
	}
	if value, ok := uu.mutation.BirthdayDisplay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: user.FieldBirthdayDisplay,
		})
	}
	if value, ok := uu.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: user.FieldGender,
		})
	}
	if value, ok := uu.mutation.GenderDisplay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: user.FieldGenderDisplay,
		})
	}
	if value, ok := uu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldCreatedAt,
		})
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldUpdatedAt,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetActive sets the "active" field.
func (uuo *UserUpdateOne) SetActive(b bool) *UserUpdateOne {
	uuo.mutation.SetActive(b)
	return uuo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableActive(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetActive(*b)
	}
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetEmailAuthenticationKey sets the "email_authentication_key" field.
func (uuo *UserUpdateOne) SetEmailAuthenticationKey(s string) *UserUpdateOne {
	uuo.mutation.SetEmailAuthenticationKey(s)
	return uuo
}

// SetEmailAuthenticationKeyCreatedAt sets the "email_authentication_key_created_at" field.
func (uuo *UserUpdateOne) SetEmailAuthenticationKeyCreatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetEmailAuthenticationKeyCreatedAt(t)
	return uuo
}

// SetEmailAuthenticationStatus sets the "email_authentication_status" field.
func (uuo *UserUpdateOne) SetEmailAuthenticationStatus(b bool) *UserUpdateOne {
	uuo.mutation.SetEmailAuthenticationStatus(b)
	return uuo
}

// SetNillableEmailAuthenticationStatus sets the "email_authentication_status" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmailAuthenticationStatus(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetEmailAuthenticationStatus(*b)
	}
	return uuo
}

// SetName sets the "name" field.
func (uuo *UserUpdateOne) SetName(s string) *UserUpdateOne {
	uuo.mutation.SetName(s)
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePassword(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPassword(*s)
	}
	return uuo
}

// SetRole sets the "role" field.
func (uuo *UserUpdateOne) SetRole(i int) *UserUpdateOne {
	uuo.mutation.ResetRole()
	uuo.mutation.SetRole(i)
	return uuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRole(i *int) *UserUpdateOne {
	if i != nil {
		uuo.SetRole(*i)
	}
	return uuo
}

// AddRole adds i to the "role" field.
func (uuo *UserUpdateOne) AddRole(i int) *UserUpdateOne {
	uuo.mutation.AddRole(i)
	return uuo
}

// SetResetPasswordKey sets the "reset_password_key" field.
func (uuo *UserUpdateOne) SetResetPasswordKey(s string) *UserUpdateOne {
	uuo.mutation.SetResetPasswordKey(s)
	return uuo
}

// SetResetPasswordKeyCreatedAt sets the "reset_password_key_created_at" field.
func (uuo *UserUpdateOne) SetResetPasswordKeyCreatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetResetPasswordKeyCreatedAt(t)
	return uuo
}

// SetHeight sets the "height" field.
func (uuo *UserUpdateOne) SetHeight(i int) *UserUpdateOne {
	uuo.mutation.ResetHeight()
	uuo.mutation.SetHeight(i)
	return uuo
}

// AddHeight adds i to the "height" field.
func (uuo *UserUpdateOne) AddHeight(i int) *UserUpdateOne {
	uuo.mutation.AddHeight(i)
	return uuo
}

// SetHeightDisplay sets the "height_display" field.
func (uuo *UserUpdateOne) SetHeightDisplay(ud user.HeightDisplay) *UserUpdateOne {
	uuo.mutation.SetHeightDisplay(ud)
	return uuo
}

// SetWeight sets the "weight" field.
func (uuo *UserUpdateOne) SetWeight(i int) *UserUpdateOne {
	uuo.mutation.ResetWeight()
	uuo.mutation.SetWeight(i)
	return uuo
}

// AddWeight adds i to the "weight" field.
func (uuo *UserUpdateOne) AddWeight(i int) *UserUpdateOne {
	uuo.mutation.AddWeight(i)
	return uuo
}

// SetWeightDisplay sets the "weight_display" field.
func (uuo *UserUpdateOne) SetWeightDisplay(ud user.WeightDisplay) *UserUpdateOne {
	uuo.mutation.SetWeightDisplay(ud)
	return uuo
}

// SetWingspan sets the "wingspan" field.
func (uuo *UserUpdateOne) SetWingspan(i int) *UserUpdateOne {
	uuo.mutation.ResetWingspan()
	uuo.mutation.SetWingspan(i)
	return uuo
}

// AddWingspan adds i to the "wingspan" field.
func (uuo *UserUpdateOne) AddWingspan(i int) *UserUpdateOne {
	uuo.mutation.AddWingspan(i)
	return uuo
}

// SetWingspanDisplay sets the "wingspan_display" field.
func (uuo *UserUpdateOne) SetWingspanDisplay(ud user.WingspanDisplay) *UserUpdateOne {
	uuo.mutation.SetWingspanDisplay(ud)
	return uuo
}

// SetBirthday sets the "birthday" field.
func (uuo *UserUpdateOne) SetBirthday(t time.Time) *UserUpdateOne {
	uuo.mutation.SetBirthday(t)
	return uuo
}

// SetBirthdayDisplay sets the "birthday_display" field.
func (uuo *UserUpdateOne) SetBirthdayDisplay(ud user.BirthdayDisplay) *UserUpdateOne {
	uuo.mutation.SetBirthdayDisplay(ud)
	return uuo
}

// SetGender sets the "gender" field.
func (uuo *UserUpdateOne) SetGender(u user.Gender) *UserUpdateOne {
	uuo.mutation.SetGender(u)
	return uuo
}

// SetGenderDisplay sets the "gender_display" field.
func (uuo *UserUpdateOne) SetGenderDisplay(ud user.GenderDisplay) *UserUpdateOne {
	uuo.mutation.SetGenderDisplay(ud)
	return uuo
}

// SetCreatedAt sets the "created_at" field.
func (uuo *UserUpdateOne) SetCreatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetCreatedAt(t)
	return uuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCreatedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetCreatedAt(*t)
	}
	return uuo
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	uuo.defaults()
	if len(uuo.hooks) == 0 {
		if err = uuo.check(); err != nil {
			return nil, err
		}
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uuo.check(); err != nil {
				return nil, err
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			if uuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.HeightDisplay(); ok {
		if err := user.HeightDisplayValidator(v); err != nil {
			return &ValidationError{Name: "height_display", err: fmt.Errorf("ent: validator failed for field \"height_display\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.WeightDisplay(); ok {
		if err := user.WeightDisplayValidator(v); err != nil {
			return &ValidationError{Name: "weight_display", err: fmt.Errorf("ent: validator failed for field \"weight_display\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.WingspanDisplay(); ok {
		if err := user.WingspanDisplayValidator(v); err != nil {
			return &ValidationError{Name: "wingspan_display", err: fmt.Errorf("ent: validator failed for field \"wingspan_display\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.BirthdayDisplay(); ok {
		if err := user.BirthdayDisplayValidator(v); err != nil {
			return &ValidationError{Name: "birthday_display", err: fmt.Errorf("ent: validator failed for field \"birthday_display\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.Gender(); ok {
		if err := user.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf("ent: validator failed for field \"gender\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.GenderDisplay(); ok {
		if err := user.GenderDisplayValidator(v); err != nil {
			return &ValidationError{Name: "gender_display", err: fmt.Errorf("ent: validator failed for field \"gender_display\": %w", err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing User.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Active(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldActive,
		})
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEmail,
		})
	}
	if value, ok := uuo.mutation.EmailAuthenticationKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEmailAuthenticationKey,
		})
	}
	if value, ok := uuo.mutation.EmailAuthenticationKeyCreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldEmailAuthenticationKeyCreatedAt,
		})
	}
	if value, ok := uuo.mutation.EmailAuthenticationStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: user.FieldEmailAuthenticationStatus,
		})
	}
	if value, ok := uuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldName,
		})
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassword,
		})
	}
	if value, ok := uuo.mutation.Role(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldRole,
		})
	}
	if value, ok := uuo.mutation.AddedRole(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldRole,
		})
	}
	if value, ok := uuo.mutation.ResetPasswordKey(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldResetPasswordKey,
		})
	}
	if value, ok := uuo.mutation.ResetPasswordKeyCreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldResetPasswordKeyCreatedAt,
		})
	}
	if value, ok := uuo.mutation.Height(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldHeight,
		})
	}
	if value, ok := uuo.mutation.AddedHeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldHeight,
		})
	}
	if value, ok := uuo.mutation.HeightDisplay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: user.FieldHeightDisplay,
		})
	}
	if value, ok := uuo.mutation.Weight(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldWeight,
		})
	}
	if value, ok := uuo.mutation.AddedWeight(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldWeight,
		})
	}
	if value, ok := uuo.mutation.WeightDisplay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: user.FieldWeightDisplay,
		})
	}
	if value, ok := uuo.mutation.Wingspan(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldWingspan,
		})
	}
	if value, ok := uuo.mutation.AddedWingspan(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldWingspan,
		})
	}
	if value, ok := uuo.mutation.WingspanDisplay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: user.FieldWingspanDisplay,
		})
	}
	if value, ok := uuo.mutation.Birthday(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldBirthday,
		})
	}
	if value, ok := uuo.mutation.BirthdayDisplay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: user.FieldBirthdayDisplay,
		})
	}
	if value, ok := uuo.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: user.FieldGender,
		})
	}
	if value, ok := uuo.mutation.GenderDisplay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: user.FieldGenderDisplay,
		})
	}
	if value, ok := uuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldCreatedAt,
		})
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: user.FieldUpdatedAt,
		})
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
