enum OrderDirection {
  ASC
  DESC
}

enum UserOrderField {
  EMAIL
  NAME
}

interface Node {
  id: ID!
}

type User implements Node {
  id: ID!
  email: String!
  name: String!
}

scalar Cursor

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
}

type UserConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [UserEdge]
}

type UserEdge {
  node: User
  cursor: Cursor!
}

input UserOrder {
  direction: OrderDirection!
  field: UserOrderField
}

input RegisterUserInput {
  key: String!
  name: String!
  password: String!
}

type Query {
  users(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: UserOrder
  ): UserConnection
  existUserEmail(email: String!): Boolean!
  isValidRegistrationKey(key: String!): User!
}

type Mutation {
  createUser(email: String!): User!
  registerUser(input: RegisterUserInput!): User!
}
