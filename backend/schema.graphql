enum OrderDirection {
  ASC
  DESC
}

enum UserOrderField {
  EMAIL
  NAME
}

enum DisplayFlag {
  PRIVATE
  FRIENDS
  PUBLIC
}

enum Gender {
  MALE
  FEMALE
}

interface Node {
  id: ID!
}

type User implements Node {
  id: ID!
  email: String!
  name: String!
}

type Myself {
  id: ID!
  email: String!
  name: String!
  height: Int!
  heightDisplay: String!
  weight: Int!
  weightDisplay: String!
  wingspan: Int!
  wingspanDisplay: String!
  birthday: Date!
  birthdayDisplay: String!
  gender: Date!
  genderDisplay: String!
}

scalar Cursor

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: Cursor
  endCursor: Cursor
}

type UserConnection {
  totalCount: Int!
  pageInfo: PageInfo!
  edges: [UserEdge]
}

type UserEdge {
  node: User
  cursor: Cursor!
}

type Token {
  accessToken: String!
  refreshToken: String!
  role: Int!
}

input UserOrder {
  direction: OrderDirection!
  field: UserOrderField
}

input RegisterUserInput {
  key: String!
  name: String!
  password: String!
  height: Int!
  heightDisplay: DisplayFlag!
  weight: Int!
  weightDisplay: DisplayFlag!
  wingspan: Int!
  wingspanDisplay: DisplayFlag!
  birthday: Date!
  birthdayDisplay: DisplayFlag!
  gender: Gender!
  genderDisplay: DisplayFlag!
}

type Query {
  users(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: UserOrder
  ): UserConnection
  existUserEmail(email: String!): Boolean!
  isValidRegistrationKey(key: String!): User!
  isValidResetPasswordKey(key: String!): User!
  myself: Myself!
}

type Mutation {
  createUser(email: String!): User!
  registerUser(input: RegisterUserInput!): User!
  login(email: String!, password: String!): Token!
  resetPasswordRequest(email: String!): Boolean!
  resetPassword(key: String!, password: String!): User
}

"Date in ISO8601 e.g. 2006-01-31"
scalar Date
